import { useState, useEffect, useRef } from 'react'
import { PaperAirplaneIcon, UserIcon, CpuChipIcon, MicrophoneIcon, StopIcon, SpeakerWaveIcon, SpeakerXMarkIcon, PlayIcon, PauseIcon, Cog6ToothIcon } from '@heroicons/react/24/outline'
import { elevenLabsService, VOICES, DEFAULT_VOICE_SETTINGS } from '../services/elevenlabs'
import { chatAPI, handleAPIError } from '../services/api'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import rehypeSanitize from 'rehype-sanitize'
import '../styles/markdown.css'

const ChatPage = () => {
  const [messages, setMessages] = useState([])
  const [inputMessage, setInputMessage] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [loadingStep, setLoadingStep] = useState('')
  const [isListening, setIsListening] = useState(false)
  const [speechSupported, setSpeechSupported] = useState(false)
  const [speechError, setSpeechError] = useState('')
  const [isSpeaking, setIsSpeaking] = useState(false)
  const [speechSynthesisSupported, setSpeechSynthesisSupported] = useState(false)
  const [elevenLabsSupported, setElevenLabsSupported] = useState(true)
  const [speechSettings, setSpeechSettings] = useState({
    enabled: true,
    provider: 'elevenlabs', // 'elevenlabs' –∏–ª–∏ 'browser'
    voice: 'rachel',
    speed: 1.0,
    stability: 0.75,
    similarity_boost: 0.3,
    style: 0.3,
    use_speaker_boost: false
  })
  const [showVoiceSettings, setShowVoiceSettings] = useState(false)
  const [showSettingsMenu, setShowSettingsMenu] = useState(false)
  const messagesEndRef = useRef(null)
  const recognitionRef = useRef(null)
  const synthesisRef = useRef(null)
  const currentAudioRef = useRef(null)

  // –≠—Ç–∞–ø—ã –∑–∞–≥—Ä—É–∑–∫–∏
  const loadingSteps = [
    '–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å...',
    '–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É...',
    '–î—É–º–∞—é...',
    '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç...',
    '–ü–ª–∞–Ω–∏—Ä—É—é –∑–∞–¥–∞—á–∏...',
    '–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...',
    '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...',
    '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...',
    '–ü—Ä–æ–≤–µ—Ä—è—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏...',
    '–í–∞–ª–∏–¥–∞—Ü–∏—è...',
    '–§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç...',
    '–ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—á–µ—Å—Ç–≤–æ...',
    '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...',
    '–ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...',
    '–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...',
    '–ó–∞–≤–µ—Ä—à–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...'
  ]

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç—Ç–∞–ø–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
  const showLoadingSteps = () => {
    let stepIndex = 0
    const interval = setInterval(() => {
      if (stepIndex < loadingSteps.length) {
        setLoadingStep(loadingSteps[stepIndex])
        stepIndex++
      } else {
        clearInterval(interval)
        setLoadingStep('')
      }
    }, 2000) // –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è 1200–º—Å
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Speech Recognition –∏ Speech Synthesis
  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      setSpeechSupported(true)
      initializeSpeechRecognition()
    }
    
    if ('speechSynthesis' in window) {
      setSpeechSynthesisSupported(true)
      initializeSpeechSynthesis()
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ ElevenLabs API
    checkElevenLabsSupport()
  }, [])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ElevenLabs
  const checkElevenLabsSupport = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
      const apiKey = process.env.REACT_APP_ELEVENLABS_API_KEY
      if (apiKey && apiKey !== 'your-api-key-here') {
        setElevenLabsSupported(true)
        initializeElevenLabs()
      }
    } catch (error) {
      console.error('ElevenLabs not supported:', error)
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Speech Recognition
  const initializeSpeechRecognition = () => {
    try {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition
      
      if (!SpeechRecognition) {
        console.error('Speech Recognition not supported')
        setSpeechSupported(false)
        return
      }
      
      recognitionRef.current = new SpeechRecognition()
      
      recognitionRef.current.continuous = false
      recognitionRef.current.interimResults = false
      recognitionRef.current.lang = 'ru-RU'
      
      recognitionRef.current.onstart = () => {
        console.log('Speech recognition started')
        setIsListening(true)
        setSpeechError('')
      }
      
      recognitionRef.current.onresult = (event) => {
        console.log('Speech recognition result:', event.results)
        const transcript = event.results[0][0].transcript
        setInputMessage(prev => prev + transcript)
        setIsListening(false)
      }
      
      recognitionRef.current.onerror = (event) => {
        console.error('Speech recognition error:', event.error)
        setIsListening(false)
        
        switch (event.error) {
          case 'no-speech':
            setSpeechError('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            break
          case 'audio-capture':
            setSpeechError('–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.')
            break
          case 'not-allowed':
            setSpeechError('–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.')
            break
          case 'network':
            setSpeechError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.')
            break
          default:
            setSpeechError('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        }
      }
      
      recognitionRef.current.onend = () => {
        console.log('Speech recognition ended')
        setIsListening(false)
        setSpeechError('')
      }
      
      console.log('Speech Recognition initialized successfully')
    } catch (error) {
      console.error('Error initializing Speech Recognition:', error)
      setSpeechSupported(false)
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Speech Synthesis
  const initializeSpeechSynthesis = () => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
    const savedSettings = localStorage.getItem('speechSettings')
    if (savedSettings) {
      setSpeechSettings(JSON.parse(savedSettings))
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ElevenLabs
  const initializeElevenLabs = () => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
    const savedSettings = localStorage.getItem('speechSettings')
    if (savedSettings) {
      const settings = JSON.parse(savedSettings)
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç ElevenLabs –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      if (settings.provider === 'elevenlabs') {
        setSpeechSettings(settings)
      }
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ localStorage
  useEffect(() => {
    localStorage.setItem('chatMessages', JSON.stringify(messages))
  }, [messages])

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (showSettingsMenu && !event.target.closest('.settings-menu')) {
        setShowSettingsMenu(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [showSettingsMenu])

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏—à–∞ Escape –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
  useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.key === 'Escape' && isListening) {
        console.log('üö® ESCAPE KEY PRESSED - FORCE STOP')
        stopListening()
      }
    }

    document.addEventListener('keydown', handleKeyDown)
    return () => document.removeEventListener('keydown', handleKeyDown)
  }, [isListening])

  const generateAIResponse = (userMessage) => {
    const responses = [
      "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–æ–∑–¥–∞—Ç—å –±—é–¥–∂–µ—Ç –ø–æ –ø—Ä–∞–≤–∏–ª—É 50/30/20: 50% –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, 30% –Ω–∞ –∂–µ–ª–∞–Ω–∏—è, 20% –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.",
      "–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Å –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è: 60% –∞–∫—Ü–∏–∏, 30% –æ–±–ª–∏–≥–∞—Ü–∏–∏, 10% –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –∏–Ω–¥–µ–∫—Å–Ω—ã–µ —Ñ–æ–Ω–¥—ã!",
      "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ñ–æ–Ω–¥ –¥–æ–ª–∂–µ–Ω –ø–æ–∫—Ä—ã–≤–∞—Ç—å 3-6 –º–µ—Å—è—Ü–µ–≤ –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤. –•—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ –≤—ã—Å–æ–∫–æ–¥–æ—Ö–æ–¥–Ω–æ–º —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω–æ–º —Å—á–µ—Ç–µ –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–∞—Ö.",
      "–î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ SMART: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –∏–∑–º–µ—Ä–∏–º—ã–µ, –¥–æ—Å—Ç–∏–∂–∏–º—ã–µ, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ü–µ–ª–∏.",
      "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã.",
      "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—ã—è–≤–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Ç—Ä–∞—Ç—ã –∏ –Ω–∞–π—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏.",
      "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–≥–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏. –≠—Ç–æ –º–æ–∂–µ—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å —Ç—ã—Å—è—á–∏ —Ä—É–±–ª–µ–π –≤ –≥–æ–¥.",
      "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è. –ß–µ–º —Ä–∞–Ω—å—à–µ –Ω–∞—á–Ω–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –±—É–¥–µ—Ç –≤–∞—à –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º."
    ]
    
    return responses[Math.floor(Math.random() * responses.length)]
  }

  const handleSendMessage = async (e) => {
    e.preventDefault()
    if (!inputMessage.trim()) return

    const userMessage = {
      id: Date.now(),
      text: inputMessage,
      isUser: true,
      timestamp: new Date().toISOString()
    }

    setMessages(prev => [...prev, userMessage])
    const currentMessage = inputMessage
    setInputMessage('')
    setIsTyping(true)
    showLoadingSteps()

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ AI API
      const response = await chatAPI.sendMessage(currentMessage)
      
      const aiResponse = {
        id: Date.now() + 1,
        text: response.response,
        isUser: false,
        timestamp: new Date().toISOString()
      }
      
      setMessages(prev => [...prev, aiResponse])
      setIsTyping(false)
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
      setTimeout(() => {
        speakText(aiResponse.text)
      }, 500) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    } catch (error) {
      console.error('Error sending message:', error)
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const errorMessage = {
        id: Date.now() + 1,
        text: `–û—à–∏–±–∫–∞: ${handleAPIError(error)}`,
        isUser: false,
        timestamp: new Date().toISOString(),
        isError: true
      }
      
      setMessages(prev => [...prev, errorMessage])
      setIsTyping(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
  const startListening = () => {
    setInputMessage('')
    if (recognitionRef.current && !isListening) {
      setSpeechError('')
      try {
        recognitionRef.current.start()
      } catch (error) {
        console.error('Error starting speech recognition:', error)
        setSpeechError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏')
        setIsListening(false)
      }
    }
  }

  const stopListening = () => {
    console.log('üõë STOP LISTENING CALLED')
    console.log('Current state - isListening:', isListening)
    console.log('recognitionRef exists:', !!recognitionRef.current)
    
    // –ù–ï–ú–ï–î–õ–ï–ù–ù–û —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setIsListening(false)
    setSpeechError('')
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    if (recognitionRef.current) {
      try {
        console.log('üõë Stopping recognition...')
        recognitionRef.current.stop()
        console.log('‚úÖ Recognition stopped')
      } catch (error) {
        console.error('‚ùå Error stopping recognition:', error)
      }
    }
    
    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ recognition
    recognitionRef.current = null
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º recognition
    setTimeout(() => {
      console.log('üîÑ Reinitializing speech recognition...')
      initializeSpeechRecognition()
    }, 200)
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è text-to-speech
  const speakText = async (text) => {
    if (!speechSettings.enabled) return

    try {
      setIsSpeaking(true)
      setSpeechError('')

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      if (currentAudioRef.current) {
        currentAudioRef.current.pause()
        currentAudioRef.current = null
      }

      if (speechSettings.provider === 'elevenlabs' && elevenLabsSupported) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ElevenLabs
        const voiceSettings = {
          stability: speechSettings.stability,
          similarity_boost: speechSettings.similarity_boost,
          style: speechSettings.style,
          use_speaker_boost: speechSettings.use_speaker_boost
        }
        
        await elevenLabsService.speak(text, speechSettings.voice, voiceSettings, speechSettings.speed)
      } else if (speechSynthesisSupported) {
        // Fallback –Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π speech synthesis
        if (synthesisRef.current) {
          window.speechSynthesis.cancel()
        }

        const utterance = new SpeechSynthesisUtterance(text)
        utterance.lang = 'ru-RU'
        utterance.rate = 1
        utterance.pitch = 1
        utterance.volume = 0.8

        utterance.onstart = () => {
          setIsSpeaking(true)
        }

        utterance.onend = () => {
          setIsSpeaking(false)
        }

        utterance.onerror = (event) => {
          console.error('Speech synthesis error:', event.error)
          setIsSpeaking(false)
        }

        synthesisRef.current = utterance
        window.speechSynthesis.speak(utterance)
      }
    } catch (error) {
      console.error('Error speaking text:', error)
      setSpeechError('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
      setIsSpeaking(false)
    }
  }

  const stopSpeaking = () => {
    if (currentAudioRef.current) {
      currentAudioRef.current.pause()
      currentAudioRef.current = null
    }
    
    if (window.speechSynthesis.speaking) {
      window.speechSynthesis.cancel()
    }
    
    setIsSpeaking(false)
  }

  const toggleSpeechSettings = () => {
    const newSettings = { ...speechSettings, enabled: !speechSettings.enabled }
    setSpeechSettings(newSettings)
    localStorage.setItem('speechSettings', JSON.stringify(newSettings))
  }

  const updateVoiceSettings = (newSettings) => {
    const updatedSettings = { ...speechSettings, ...newSettings }
    setSpeechSettings(updatedSettings)
    localStorage.setItem('speechSettings', JSON.stringify(updatedSettings))
  }

  const switchProvider = (provider) => {
    updateVoiceSettings({ provider })
  }

  const clearChat = () => {
    setMessages([
      {
        id: 1,
        text: "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±—é–¥–∂–µ—Ç–∞, –∞–Ω–∞–ª–∏–∑–æ–º —Ä–∞—Å—Ö–æ–¥–æ–≤, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        isUser: false,
        timestamp: new Date().toISOString()
      }
    ])
  }

  const formatTime = (timestamp) => {
    return new Date(timestamp).toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    })
  }

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white border-b border-gray-200 px-4 sm:px-6 py-3">
        <div className="max-w-4xl mx-auto flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-pink-100 rounded-full flex items-center justify-center">
              <span className="text-lg">üë©‚Äçüíº</span>
            </div>
            <div>
              <h1 className="text-lg font-semibold text-gray-900">AI-sha</h1>
              <p className="text-xs text-gray-500">–í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫</p>
            </div>
          </div>
          
          {/* –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
          <div className="relative settings-menu">
            <button
              onClick={() => setShowSettingsMenu(!showSettingsMenu)}
              className="p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors"
              title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
            >
              <Cog6ToothIcon className="w-5 h-5" />
            </button>
            
            {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é */}
            {showSettingsMenu && (
              <div className="absolute right-0 top-full mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
                {(speechSynthesisSupported || elevenLabsSupported) && (
                  <button
                    onClick={() => {
                      setShowVoiceSettings(true)
                      setShowSettingsMenu(false)
                    }}
                    className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2"
                  >
                    <SpeakerWaveIcon className="w-4 h-4" />
                    <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞</span>
                  </button>
                )}
                <button
                  onClick={() => {
                    clearChat()
                    setShowSettingsMenu(false)
                  }}
                  className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2"
                >
                  <div className="w-4 h-4">üóëÔ∏è</div>
                  <span>–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç</span>
                </button>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
      <div className="flex-1 flex flex-col max-w-4xl mx-auto w-full">
        <div className="flex-1 flex flex-col bg-white rounded-t-xl shadow-sm border border-gray-200">

          {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
          <div className="flex-1 overflow-y-auto p-4 sm:p-6 space-y-4 sm:space-y-6">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`flex items-start space-x-3 max-w-[85%] sm:max-w-[75%] lg:max-w-[65%] ${message.isUser ? 'flex-row-reverse space-x-reverse' : ''}`}>
                  {/* –ê–≤–∞—Ç–∞—Ä */}
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                    message.isUser 
                      ? 'bg-primary' 
                      : 'bg-pink-100'
                  }`}>
                    {message.isUser ? (
                      <UserIcon className="w-5 h-5 text-white" />
                    ) : (
                      <span className="text-lg">üë©‚Äçüíº</span>
                    )}
                  </div>
                  
                  {/* –°–æ–æ–±—â–µ–Ω–∏–µ */}
                  <div className={`rounded-2xl px-4 py-3 ${
                    message.isUser
                      ? 'bg-primary text-white'
                      : 'bg-gray-100 text-gray-900'
                  }`}>
                  {message.isError ? (
                    <p className="text-sm leading-relaxed">{message.text}</p>
                  ) : (
                    <div className={`text-sm leading-relaxed prose prose-sm max-w-none ${
                      message.isUser ? 'prose text-white' : 'prose text-dark'
                    }`}>
                      <ReactMarkdown
                        remarkPlugins={[remarkGfm]}
                        rehypePlugins={[rehypeSanitize]}
                      >
                        {message.text}
                      </ReactMarkdown>
                    </div>
                  )}
                  <div className="flex items-center justify-between mt-1">
                    <p className={`text-xs ${
                      message.isUser ? 'text-white/70' : 'text-gray'
                    }`}>
                      {formatTime(message.timestamp)}
                    </p>
                    
                    {/* –ö–Ω–æ–ø–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ */}
                    {!message.isUser && speechSynthesisSupported && (
                      <button
                        onClick={() => speakText(message.text)}
                        className="p-1 rounded-full hover:bg-white/20 transition-colors"
                        title="–û–∑–≤—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                      >
                        <SpeakerWaveIcon className="w-3 h-3" />
                      </button>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
          
          {isTyping && (
            <div className="flex justify-start">
              <div className="flex items-start space-x-3">
                <div className="w-8 h-8 rounded-full bg-pink-100 flex items-center justify-center">
                  <span className="text-lg">üë©‚Äçüíº</span>
                </div>
                <div className="bg-gray-100 text-gray-900 rounded-2xl px-4 py-3">
                  <div className="flex items-center space-x-2">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                    <span className="text-sm font-medium">
                      {loadingStep || 'AI-sha –¥—É–º–∞–µ—Ç...'}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

          {/* –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Ç –ø—É—Å—Ç–æ–π */}
          {messages.length === 0 && (
            <div className="px-4 sm:px-6 py-3 bg-gray-50 border-t border-gray-200">
              <div className="flex flex-wrap gap-2">
                {[
                  "–°–æ—Å—Ç–∞–≤—å –æ—Ç—á–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü",
                  "–•–æ—á—É –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ —á—Ç–æ-—Ç–æ", 
                  "–û–ø–ª–∞—Ç–∏ —Ç–µ–∫—É—â–∏–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂",
                  "–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –º–æ–∏–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Ü–µ–ª—è–º"
                ].map((question) => (
                  <button
                    key={question}
                    onClick={() => setInputMessage(question)}
                    className="text-sm bg-white px-3 py-2 rounded-full transition-colors border border-gray-200 hover:border-primary shadow-sm group cursor-pointer"
                  >
                    <span className="text-gray-700 transition-colors">
                      {question}
                    </span>
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ */}
          <div className="p-4 sm:p-6 bg-white border-t border-gray-200">
            {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ speech recognition */}
            {speechError && (
              <div className="mb-4 bg-red-50 border border-red-200 rounded-xl p-3">
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                  <span className="text-red-700 text-sm">{speechError}</span>
                </div>
              </div>
            )}

            <form onSubmit={handleSendMessage} className="flex space-x-3">
              <div className="flex-1 relative">
                <input
                  type="text"
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  placeholder={isListening ? "–°–ª—É—à–∞—é..." : "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö..."}
                  className={`w-full px-4 py-3 pr-12 bg-white border rounded-xl text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary transition-colors ${
                    isListening 
                      ? 'border-primary ring-2 ring-primary/20 bg-primary/5'
                      : 'border-gray-300 hover:border-gray-400'
                  }`}
                  disabled={isTyping}
                />
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ */}
              {isListening && (
                <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                  <div className="flex items-center space-x-1">
                    <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                    <span className="text-xs text-red-500 font-medium">–ó–∞–ø–∏—Å—å...</span>
                  </div>
                </div>
              )}
            </div>
            
              <div className="flex items-center space-x-2">
                {/* –ö–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ */}
                {speechSupported && (
                  <button
                    type="button"
                    onClick={isListening ? stopListening : startListening}
                    disabled={isTyping}
                    className={`p-3 rounded-lg transition-colors ${
                      isListening
                        ? 'bg-red-500 hover:bg-red-600 text-white'
                        : 'bg-gray-100 hover:bg-gray-200 text-gray-600 disabled:bg-gray-50 disabled:text-gray-400'
                    }`}
                    title={isListening ? "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å" : "–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥"}
                  >
                    {isListening ? (
                      <StopIcon className="w-5 h-5" />
                    ) : (
                      <MicrophoneIcon className="w-5 h-5" />
                    )}
                  </button>
                )}
                
                
                {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                <button
                  type="submit"
                  disabled={!inputMessage.trim() || isTyping}
                  className="bg-primary hover:bg-dark-green disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-bold p-3 rounded-lg transition-colors"
                >
                  <PaperAirplaneIcon className="w-5 h-5" />
                </button>
              </div>
          </form>
        </div>
      </div>
    </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ–ª–æ—Å–∞ */}
      {showVoiceSettings && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl p-6 w-full max-w-md border border-gray-200 shadow-xl">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold text-dark">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞</h2>
              <button
                onClick={() => setShowVoiceSettings(false)}
                className="text-gray-500 hover:text-gray-700 text-2xl"
              >
                √ó
              </button>
            </div>

            <div className="space-y-4">
              {/* –í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ */}
              <div>
                <label className="block text-sm font-medium text-dark mb-2">
                  –ü—Ä–æ–≤–∞–π–¥–µ—Ä –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
                </label>
                <div className="flex space-x-2">
                  {elevenLabsSupported && (
                    <button
                      onClick={() => switchProvider('elevenlabs')}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                        speechSettings.provider === 'elevenlabs'
                          ? 'bg-primary text-white'
                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                      }`}
                    >
                      ElevenLabs (–ü—Ä–µ–º–∏—É–º)
                    </button>
                  )}
                  {speechSynthesisSupported && (
                    <button
                      onClick={() => switchProvider('browser')}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                        speechSettings.provider === 'browser'
                          ? 'bg-primary text-white'
                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                      }`}
                    >
                      –ë—Ä–∞—É–∑–µ—Ä
                    </button>
                  )}
                </div>
              </div>

              {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ElevenLabs */}
              {speechSettings.provider === 'elevenlabs' && elevenLabsSupported && (
                <>
                  {/* –í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ */}
                  <div>
                    <label className="block text-sm font-medium text-dark mb-2">
                      –ì–æ–ª–æ—Å
                    </label>
                    <select
                      value={speechSettings.voice}
                      onChange={(e) => updateVoiceSettings({ voice: e.target.value })}
                      className="w-full px-3 py-2 border border-light rounded-lg text-dark focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
                    >
                      {Object.entries(VOICES).map(([key, voice]) => (
                        <option key={key} value={key}>
                          {voice.name} - {voice.description}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å */}
                  <div>
                    <label className="block text-sm font-medium text-dark mb-2">
                      –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {speechSettings.stability}
                    </label>
                    <input
                      type="range"
                      min="0"
                      max="1"
                      step="0.1"
                      value={speechSettings.stability}
                      onChange={(e) => updateVoiceSettings({ stability: parseFloat(e.target.value) })}
                      className="w-full"
                    />
                  </div>

                  {/* Similarity Boost */}
                  <div>
                    <label className="block text-sm font-medium text-dark mb-2">
                      –°—Ö–æ–∂–µ—Å—Ç—å: {speechSettings.similarity_boost}
                    </label>
                    <input
                      type="range"
                      min="0"
                      max="1"
                      step="0.1"
                      value={speechSettings.similarity_boost}
                      onChange={(e) => updateVoiceSettings({ similarity_boost: parseFloat(e.target.value) })}
                      className="w-full"
                    />
                  </div>

                  {/* Style */}
                  <div>
                    <label className="block text-sm font-medium text-dark mb-2">
                      –°—Ç–∏–ª—å: {speechSettings.style}
                    </label>
                    <input
                      type="range"
                      min="0"
                      max="1"
                      step="0.1"
                      value={speechSettings.style}
                      onChange={(e) => updateVoiceSettings({ style: parseFloat(e.target.value) })}
                      className="w-full"
                    />
                  </div>

                  {/* Speaker Boost */}
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="speakerBoost"
                      checked={speechSettings.use_speaker_boost}
                      onChange={(e) => updateVoiceSettings({ use_speaker_boost: e.target.checked })}
                      className="rounded"
                    />
                    <label htmlFor="speakerBoost" className="text-sm text-dark">
                      –£—Å–∏–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞
                    </label>
                  </div>
                </>
              )}

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö */}
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                <h3 className="text-sm font-medium text-blue-800 mb-1">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö:</h3>
                <ul className="text-xs text-blue-700 space-y-1">
                  <li>‚Ä¢ <strong>ElevenLabs:</strong> –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ—á—å</li>
                  <li>‚Ä¢ <strong>–ë—Ä–∞—É–∑–µ—Ä:</strong> –ë—ã—Å—Ç—Ä–æ, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∞</li>
                </ul>
              </div>
            </div>

            <div className="flex justify-end mt-6">
              <button
                onClick={() => setShowVoiceSettings(false)}
                className="px-4 py-2 bg-primary text-white rounded-lg hover:bg-dark-green transition-colors"
              >
                –ì–æ—Ç–æ–≤–æ
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default ChatPage
